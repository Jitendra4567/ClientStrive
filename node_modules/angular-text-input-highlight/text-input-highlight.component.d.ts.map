{"version":3,"file":"text-input-highlight.component.d.ts","sources":["text-input-highlight.component.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, Renderer2, SimpleChanges } from '@angular/core';\nimport { HighlightTag } from './highlight-tag.interface';\nexport interface TagMouseEvent {\n    tag: HighlightTag;\n    target: HTMLElement;\n    event: MouseEvent;\n}\nexport declare class TextInputHighlightComponent implements OnChanges, OnDestroy {\n    private renderer;\n    private cdr;\n    /**\n     * The CSS class to add to highlighted tags\n     */\n    tagCssClass: string;\n    /**\n     * An array of indices of the textarea value to highlight\n     */\n    tags: HighlightTag[];\n    /**\n     * The textarea to highlight\n     */\n    textInputElement: HTMLTextAreaElement;\n    /**\n     * The textarea value, in not provided will fall back to trying to grab it automatically from the textarea\n     */\n    textInputValue: string;\n    /**\n     * Called when the area over a tag is clicked\n     */\n    tagClick: EventEmitter<TagMouseEvent>;\n    /**\n     * Called when the area over a tag is moused over\n     */\n    tagMouseEnter: EventEmitter<TagMouseEvent>;\n    /**\n     * Called when the area over the tag has the mouse is removed from it\n     */\n    tagMouseLeave: EventEmitter<TagMouseEvent>;\n    /**\n     * @private\n     */\n    highlightElementContainerStyle: {\n        [key: string]: string;\n    };\n    /**\n     * @private\n     */\n    highlightedText: string;\n    private highlightElement;\n    private textareaEventListeners;\n    private highlightTagElements;\n    private mouseHoveredTag;\n    private isDestroyed;\n    constructor(renderer: Renderer2, cdr: ChangeDetectorRef);\n    /**\n     * Manually call this function to refresh the highlight element if the textarea styles have changed\n     */\n    refresh(): void;\n    /**\n     * @private\n     */\n    ngOnChanges(changes: SimpleChanges): void;\n    /**\n     * @private\n     */\n    ngOnDestroy(): void;\n    /**\n     * @private\n     */\n    onWindowResize(): void;\n    private textInputElementChanged();\n    private addTags();\n    private handleTextareaMouseEvent(event, eventName);\n}\n"]}